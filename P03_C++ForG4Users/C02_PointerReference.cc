//******************************************************************************
// Introduction to C++ for Geant4 Users: ポインター・タイプ と レファレンス・タイプ
//******************************************************************************

//------------------------------------------------------------------------------
// [演習 1]  ポインタを理解する
//   (演習実行手順)
//     下のプログラムのコメント部分に書かれた[問]に対して、答えを入力してプログラムを完成せよ。
//------------------------------------------------------------------------------

#include <iostream>
#include <vector>
using namespace std;

float* makeData( int );
void PassVal1( float );
void PassVal2( float* );
void PassVal3( float& );
float PassVal4( float );


int main() {

// built-in及び標準ライブラリのオブジェクトを作成する
  int ei = 123;                      // intオブジェクトの作成
  ??? mi = 123;                      // [問] 上と同じタイプのオブジェクト(mi)を作成

  vector<double> evec = vector<double>{ 5.67, 6.78, 7.89 }; // vectorオブジェクトの作成
  ??????<double> mvec = ??????<double>{ 5.67, 6.78, 7.89 }; // [問] 上と同じタイプのオブジェクトを作成

// "&演算子"を使い、上のオブジェクトへのポインタ(ポインタ・タイプのオブジェクト)を作成する
  int* eip = &ei;                    // intオブジェクトへのポインタ作成
  int? mip = &mi;                    // [問] 上と同じタイプのオブジェクトを作成

  vector<double>*  evecp = &evec;    // vectorオブジェクトへのポインタ作成
  vector<double>?  mvecp = &mvec;    // [問] 上と同じタイプのオブジェクトを作成

// "*演算子"を使い、ポインタが指すオブジェクトを取得する - dereferencing
  int ej = *eip;                     // intオブジェクトへのポインタからintオブジェクトを取得
  int mj = ?mip;                     // [問] 上と同じタイプのオブジェクトを作成

  vector<double> evecc = *evecp;     // vectorオブジェクトへのポインタからvectorオブジェクトを取得
  vector<double> mvecc = ?mvecp;     // [問] 上と同じタイプのオブジェクトを作成

  //***** 入力された答えのチェック (穴埋め問題はない) 
  cout << "mj (derefering): " << mj << endl;              // 出力は'1.23'
  cout << "mvecc (derefering): " << mvecc.at(1) << endl;  // 出力は'6.78'

// ポインタが指すオブジェクトのmember関数を使う
  int evecp_Size = evecp->size();    // vectorタイプの関数 "size()"を使い、要素の総数を取得
  int mvecp_Size = mvecp??size();    // [問] 上と同じように関数を使う

  double evecp_At = evecp->at(1);    // vectorタイプの関数 "at()"を使い、2番目要素の値を取得    
  double mvecp_At = mvecp??at(1);    // [問] 上と同じように関数を使う    

  double evec_At = evec.at(1);       // ポインタからでなく直接オブジェクトから関数"at()"を使う場合    
  double mvec_At = mvec?at(1);       // [問] 上と同じように関数を使う    

  //***** 入力された答えのチェック (穴埋め問題はない) 
  cout << "Size  (mpvec->size()): " << mvecp_Size << endl;  // 出力は'3'
  cout << "Value (mvecp->at(1)): "  << mvecp_At   << endl;  // 出力は'6.78'


//------------------------------------------------------------------------------
// [演習 2]  レファレンスを理解する
//   (演習実行手順)
//     下のプログラムのコメント部分に書かれた[問]に対して、答えを入力してプログラムを完成せよ。
//------------------------------------------------------------------------------ 

// built-in integerオブジェクトを作成する
  int ek = 456;                      // 'int'オブジェクトの作成
  ??? mk = 456;                      // [問] 上と同じように'int'オブジェクトを作成

// 上のintegerオブジェクトのレファレンス(レファレンス・タイプのオブジェクト)を作成する 
  int& ekr = ek;                     // 'int'タイプのレファレンス・オブジェクトを作成 
  ???? mkr = mk;                     // [問] 上と同じように'int'タイプのレファレンスを作成   

  //***** 入力された答えのチェック (穴埋め問題はない) 
  cout << "Adress (&mk) : " << &mk  << endl;   
  cout << "Address(&mkr): " << &mkr << endl;  // 'mk'と'mkr'は同じアドレスを持つ
  cout << "Value  (mkr) : " << mkr  << endl;  // ’mk’と'mkr'は同じ値を持つ


//------------------------------------------------------------------------------
// [演習 3]  関数の引数にオブジェクト、ポインタ、レファレンスを使う手法を理解する
//   (演習実行手順)
//     ここでは、穴埋め問題はない。それぞれの手法のコードを読み意味を理解せよ
//------------------------------------------------------------------------------

// オブジェクト渡しを使う
//  - 関数は渡されたオブジェクトのコピーをブロック内で作り、コピーに対して関数操作をする。
//    コピーしたオブジェクトは関数ブロックが終了すると消失するので、関数外に操作結果は伝わらない
//
//    [問] 以下の'PassVal1()'関数の使用で、渡したオブジェクトが変化しないこと確かめよ
//         'PassVal1()'関数は以下の通り (実コードは演習ファイルの最後にある)
//            void PassVal1( float val ) { val += 10; }   // 引数に'10'を加算する

  float oVal = 1.23;
  PassVal1( oVal );                   // 値渡しの関数を使う
  cout << "oVal: " << oVal << endl;   // 'oVal'は元の'1.23'のまま

// ポインタ渡しを使う
//    [問] 以下の'PassVal2()'関数の使用で、渡したオブジェクトは変化していること確かめよ
//         'PassVal2()'関数は以下の通り (実コードは演習ファイルの最後にある)
//              void PassVal2( float* val ) { *val += 20; }   // 引数に'20'を加算する

  float* pVal = &oVal;                // 'pVal'は’oVal'へのポインタ
  PassVal2( pVal );                   // ポインタ渡しの関数を使う
  cout << "oVal: " << oVal << endl;   // 'oVal'は'21.23'となる

// リファレンス渡しを使う
//    [問] 以下の'PassVal3()'関数の使用で、渡したオブジェクトは変化していること確かめよ
//         'PassVal3()'関数は以下の通り (実コードは演習ファイルの最後にある)
//              void PassVal3( float& val ) { val += 30; }   // 引数に'30'を加算する

  float rVal = 4.56;
  PassVal3( rVal );                   // リファレンス渡しの関数を使う
  cout << "rVal: " << rVal << endl;   // 'rVal'は'34.56'になる

// 返り値渡しを使う
//    [問] 以下の'PassVal4()'関数の使用で、渡したオブジェクトは変化していること確かめよ
//         'PassVal4()'関数は以下の通り (実コードは演習ファイルの最後にある)
//              float PassVal4( float val ) { val += 40; }   // 引数に'40'を加算する

  float retVal = 7.89;
  retVal = PassVal4( retVal );                   // 返り値渡しの関数を使う
  cout << "retVal: " << retVal << endl;          // 'retVal'の値は'47.89'

//------------------------------------------------------------------------------
// [演習 4]  上の演習が完了したら、以下のコマンドでプログラムを実行し答えをチェックする
//       % c++ C02_PointerReference.cc        
//       % c++ -std=c++11 C02_PointerReference.cc   (もし、上記でerrorが出た場合)        
//------------------------------------------------------------------------------
}


//==============================================================================
// [ 演習２で使用している関数の定義 ]
//==============================================================================

void PassVal1( float  val ) { val  += 10; }   // 引数に'10'を加算する
void PassVal2( float* val ) { *val += 20; }   // 引数に'20'を加算する
void PassVal3( float& val ) { val  += 30; }   // 引数に'30'を加算する
float PassVal4( float val ) { return val += 40; }   // 引数に'40'を加算する

